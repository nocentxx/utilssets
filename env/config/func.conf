function is_command_exists() {
    if [ "xx$1" = "xx" ]; then
        echo "error: should give command"
        return 1
    fi

    local ret='0'
    command -v $1 > /dev/null 2>&1 || { local ret='1'; }

    # fail on non-zero return value
    if [ "$ret" -ne 0 ]; then
        return 1
    fi

    return 0
}

function set_proxy()
{
    proxy="$1"
    export http_proxy="${proxy}"
    export https_proxy="${proxy}"
    echo "set http proxy to ${proxy}"
}

set_noproxy()
{
    unset http_proxy
    unset https_proxy
    echo "unset proxy to none."
}

# export WORK_DIR=`/bin/pwd`
function xcroot()
{
    if [ -n "$WORK_DIR" ]; then
        \cd $WORK_DIR
    else
        echo "Couldn't locate the work dir."
    fi
}

function vim_param_parser()
{
    local file_only
    local file_param
    local dash_param
    local line_param

    for var in $@
    do
        if [ "$file_only" == "yes" ]; then
            file_param="$file_param $var"
            continue
        fi

        # for -/-- parameter
        if [[ "$var" =~ ^[-]+[a-zA-Z0-9] ]]; then
            dash_param="$dash_param $var"
            continue
        fi
        # for +/+<lnum> parameter
        if [[ "$var" =~ ^\+.* ]]; then
            line_param="$line_param $var"
            continue
        fi
        # for -- parameter
        if [ "$var" == "--" ]; then
            file_only="yes"
            file_param="-- $file_param"
            continue
        fi

        file_param="${file_param}${file_param:+ }$var"
    done

    vim_param="${dash_param}${dash_param:+ }${line_param}${line_param:+ }${file_param}"
}

# use vim clientserver feature
function xvi()
{
    unset vim_param
    local vim_server_prefix=VIMSERVER

    if [ $# -eq 0 -o "$1" == "-" ]; then
        vim $@
    else
        vim_param_parser $@

        local vim_server=`vim --serverlist | grep ${vim_server_prefix}`
        if [ "$vim_server" == "" ]; then
            vim --servername ${vim_server_prefix}_$$ $vim_param
        else
            vim --servername ${vim_server} --remote $vim_param
        fi
    fi
}
